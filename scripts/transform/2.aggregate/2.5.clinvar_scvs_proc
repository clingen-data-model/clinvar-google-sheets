-- -- initialize table 
-- CREATE OR REPLACE TABLE `clingen-stage.clinvar_curator.clinvar_scvs`
-- (
--   variation_id STRING NOT NULL,
--   id STRING NOT NULL, 
--   version INT NOT NULL, 
--   rpt_stmt_type STRING NOT NULL,
--   rank INT NOT NULL, 
--   last_evaluated DATE,
--   classif_type STRING,
--   clinsig_type INT,
--   submitted_classification STRING,
--   submitter_id STRING,
--   submission_date DATE,
--   origin STRING,
--   affected_status STRING,
--   method_type STRING,
--   start_release_date DATE,
--   end_release_date DATE,
--   deleted_release_date DATE,
--   deleted_count INT DEFAULT 0
-- );
CREATE OR REPLACE PROCEDURE `clingen-stage.clinvar_curator.clinvar_scvs_proc`(start_with STRING)
BEGIN

  DECLARE schemas ARRAY<STRUCT<schema_name STRING, release_date DATE, next_release_date DATE>>;
  call clinvar_curator.get_schemas(start_with, schemas);

  FOR rec IN 
  (
    SELECT 
      s.schema_name, 
      s.release_date, 
      s.next_release_date 
    FROM UNNEST(schemas) as s
  )
  DO

    -- deletes
    EXECUTE IMMEDIATE FORMAT("""
      UPDATE `clingen-stage.clinvar_curator.clinvar_scvs` cs
      SET 
        deleted_release_date = %T,
        deleted_count = deleted_count + 1
      WHERE 
        cs.deleted_release_date is NULL AND
        NOT EXISTS 
        (
          SELECT 
            scv.id 
          FROM `clingen-stage.%s.scv_summary` scv
          WHERE 
            scv.variation_id = cs.variation_id AND
            scv.id = cs.id AND 
            scv.version = cs.version AND 
            scv.release_date = %T
        )
    """, rec.release_date, rec.schema_name, rec.release_date);

    -- updated scv id+ver
    -- NOTE: Further investigation of handling cvc_actions is needed for collating the scv id+ver updates, 
    --       Simply overwriting the changes to last and pending cvc_actions appears to produce invalid outcomes
    --       The problem could be back in the building of the data in the scv_summary_proc?!
    EXECUTE IMMEDIATE FORMAT("""
      UPDATE `clingen-stage.clinvar_curator.clinvar_scvs` cs
      SET 
        cs.variation_id = scv.variation_id,
        cs.rpt_stmt_type =IF(scv.cvc_stmt_type NOT IN ('path','dr'), 'oth', scv.cvc_stmt_type),
        cs.rank = scv.rank,
        cs.last_evaluated = scv.last_evaluated,
        cs.classif_type = scv.classif_type,
        cs.clinsig_type = scv.significance,
        cs.submitted_classification = scv.submitted_classification,
        cs.submitter_id = scv.submitter_id,
        cs.submission_date = scv.submission_date,
        cs.origin = scv.origin,
        cs.affected_status = scv.affected_status,
        cs.method_type = scv.method_type,
        cs.end_release_date = scv.release_date,
        cs.deleted_release_date = NULL
      FROM `clingen-stage.%s.scv_summary` scv
      WHERE 
        scv.release_date = %T AND 
        scv.variation_id = cs.variation_id AND
        scv.id = cs.id AND 
        scv.version=cs.version 
    """, rec.schema_name, rec.release_date);

    -- new scv variation+id+version
    EXECUTE IMMEDIATE FORMAT("""
      INSERT INTO `clingen-stage.clinvar_curator.clinvar_scvs` 
      (
        variation_id, id, version, rpt_stmt_type, 
        rank, last_evaluated, classif_type, clinsig_type, 
        submitted_classification, submitter_id, submission_date, origin, 
        affected_status, method_type, start_release_date, end_release_date
      )
      SELECT 
        scv.variation_id,
        scv.id, 
        scv.version, 
        IF(scv.cvc_stmt_type NOT IN ('path','dr'), 'oth', scv.cvc_stmt_type) as rpt_stmt_type,
        scv.rank, 
        scv.last_evaluated,
        scv.classif_type,
        scv.significance as clinsig_type,
        scv.submitted_classification,
        scv.submitter_id,
        scv.submission_date,
        scv.origin,
        scv.affected_status,
        scv.method_type,
        scv.release_date as start_release_date,
        scv.release_date as end_release_date
      FROM `clingen-stage.%s.scv_summary` scv
      WHERE 
        scv.release_date = %T AND
        NOT EXISTS 
        (
          SELECT 
            cs.id 
          FROM `clingen-stage.clinvar_curator.clinvar_scvs` cs
          WHERE 
            scv.variation_id = cs.variation_id AND 
            scv.id = cs.id AND 
            scv.version = cs.version 
        )
    """, rec.schema_name, rec.release_date);

  END FOR;

END;

-- one variant processing of SCVs per release

-- -- housekeeping, remove any duplicate rows in scv.summary for the snapshot dbs clinvar_2019_06_01_v0, 
-- --   clinvar_2021_03_02_v1_2_9(SCV001164315), clinvar_2022_07_24_v1_6_46(1,337 duplicates?!)
-- CREATE OR REPLACE TABLE `clingen-stage.clinvar_2022_07_24_v1_6_46.scv_summary`
-- AS
-- SELECT 
--   release_date,
--   id,
--   version,
--   variation_id,
--   last_evaluated,
--   rank,
--   review_status,
--   clinvar_stmt_type,
--   cvc_stmt_type,
--   submitted_classification,
--   classif_type,
--   significance,
--   submitter_id,
--   submission_date,
--   origin,
--   affected_status,
--   method_type,
--   last_processed_curation_action,
--   pending_curation_action	
-- FROM (
--   SELECT *, ROW_NUMBER() OVER (PARTITION BY release_date, variation_id, id, version) row_number
--   FROM `clingen-stage.clinvar_2022_07_24_v1_6_46.scv_summary`
-- )
-- WHERE row_number = 1
-- ;

-- test. variant id 36658
