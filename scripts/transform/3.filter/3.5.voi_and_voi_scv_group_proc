-- TODO ! still need to deal with process to update these tables correctly. For now, always recreate tables from scratch.

CREATE OR REPLACE PROCEDURE `clingen-stage.clinvar_curator.voi_and_voi_scv_group_proc`()
BEGIN

  CREATE OR REPLACE TABLE `clingen-stage.clinvar_curator.voi_group`
  (			
    start_release_date DATE, 
    end_release_date DATE,
    variation_id	STRING,			
    rpt_stmt_type	STRING,			
    rank	INTEGER,			
    agg_classif	STRING,			
    agg_classif_w_count	STRING,			
    conflict	INTEGER,			
    agg_sig_type	INTEGER,			
    sig_type ARRAY<STRUCT<count INT64, percent NUMERIC>>,
    max_last_evaluated	DATE,			
    max_submission_date	DATE,			
    submission_count	INTEGER DEFAULT 0,			
    submitter_count	INTEGER DEFAULT 0,			
    nc_submission_count	INTEGER DEFAULT 0
  );

  INSERT `clingen-stage.clinvar_curator.voi_group`
  (
    start_release_date, end_release_date, variation_id, 
    rpt_stmt_type, rank, 
    agg_classif, agg_classif_w_count, conflict,
    agg_sig_type, sig_type, max_last_evaluated,
    max_submission_date, submission_count, submitter_count
  )
  WITH x AS 
  (
    SELECT 
      vs.variation_id, 
      vr.start_release_date,
      vr.end_release_date,
      vs.rpt_stmt_type, 
      vs.rank,
      vs.classif_type,
      vs.clinsig_type,
      COUNT(vs.id) as scv_cnt
    FROM `clingen-stage.clinvar_curator.voi_scv_change` vr
    JOIN `clingen-stage.clinvar_curator.voi_scv` vs 
    ON 
        vs.variation_id = vr.variation_id AND
        (vs.start_release_date <= vr.end_release_date) AND 
        (vs.end_release_date >= vr.start_release_date)
    WHERE NOT EXISTS 
    (
      SELECT vrtr.variation_id
      FROM `clingen-stage.clinvar_curator.voi_group` vrtr
      WHERE 
        vrtr.start_release_date = vr.start_release_date AND 
        vrtr.end_release_date = vr.end_release_date AND
        vrtr.variation_id=vs.variation_id AND
        vrtr.rpt_stmt_type=vs.rpt_stmt_type AND
        vrtr.rank=vs.rank
    )
    GROUP BY 
      vs.variation_id, 
      vr.start_release_date, 
      vr.end_release_date, 
      vs.rpt_stmt_type, 
      vs.rank, 
      vs.clinsig_type, 
      vs.classif_type
  )
  SELECT 
    y.start_release_date,
    y.end_release_date,
    y.variation_id, 
    y.rpt_stmt_type, 
    y.rank,
    y.agg_classif,
    y.agg_classif_w_count,
    COUNT(DISTINCT vs.clinsig_type) as conflict,
    SUM(DISTINCT IF(vs.clinsig_type=2,4,IF(vs.clinsig_type=1,2,1))) as agg_sig_type,
    `clingen-stage.clinvar_curator.createSigType`(
      COUNT(DISTINCT IF(vs.clinsig_type = 0, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(vs.clinsig_type = 1, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(vs.clinsig_type = 2, vs.submitter_id, NULL))
    ) as sig_type,
    MAX(vs.last_evaluated) as max_last_evaluated,
    MAX(vs.submission_date) as max_submission_date,
    COUNT(DISTINCT vs.id) as submission_count,
    COUNT(DISTINCT vs.submitter_id) as submitter_count
  FROM (
    SELECT  
      x.variation_id, 
      x.start_release_date,
      x.end_release_date, 
      x.rpt_stmt_type, 
      x.rank, 
      string_agg(IF(scv_cnt > 0, classif_type, null), '/' order by cct.cvc_desc_order desc) AS agg_classif,
      string_agg(IF(scv_cnt > 0, classif_type||'('||scv_cnt||')', null), '/' order by cct.cvc_desc_order desc) AS agg_classif_w_count
    FROM x 
    LEFT JOIN `clingen-stage.clinvar_curator.clinvar_clinsig_types` cct 
    ON 
      cct.code = classif_type
    GROUP BY 
      x.variation_id, 
      x.start_release_date, 
      x.end_release_date, 
      x.rpt_stmt_type, 
      x.rank
  ) y 
  JOIN `clingen-stage.clinvar_curator.voi_scv` vs 
  ON 
    vs.variation_id = y.variation_id AND 
    vs.rpt_stmt_type = y.rpt_stmt_type AND 
    vs.rank = y.rank AND 
    (vs.start_release_date <= y.end_release_date) AND 
    (vs.end_release_date >= y.start_release_date)
  GROUP BY 
    y.variation_id, 
    y.start_release_date, 
    y.end_release_date,
    y.rpt_stmt_type, 
    y.rank, 
    y.agg_classif, 
    y.agg_classif_w_count;

  CREATE OR REPLACE TABLE `clingen-stage.clinvar_curator.voi_scv_group`
  (
    start_release_date DATE, 
    end_release_date DATE,
    variation_id STRING,
    id STRING,
    version INTEGER,
    rpt_stmt_type STRING,
    rank INTEGER,
    outlier_pct NUMERIC,
    scv_label STRING,
    scv_group_type STRING
  );

  -- voi_scv_release_type_rank
  INSERT  `clingen-stage.clinvar_curator.voi_scv_group` 
  (
    start_release_date, end_release_date, variation_id, id, version,
    rpt_stmt_type, rank, outlier_pct, scv_label, scv_group_type
  )
  SELECT 
    vrtr.start_release_date, 
    vrtr.end_release_date,
    vs.variation_id, 
    vs.id, 
    vs.version, 
    vrtr.rpt_stmt_type, 
    vrtr.rank, 
    vrtr.sig_type[OFFSET(vs.clinsig_type)].percent as outlier_pct,
    FORMAT("%s (%s) %3.0f%% %s", 
      IFNULL(vs.submitter_abbrev,LEFT(vs.submitter_name,15)), 
      vs.classification_abbrev, 
      vrtr.sig_type[OFFSET(vs.clinsig_type)].percent*100, 
      vs.full_scv_id) as scv_label,
    CASE vs.rpt_stmt_type
    WHEN 'path' THEN
      CASE vs.clinsig_type
          WHEN 2 THEN '1-PLP'
          WHEN 1 THEN '2-VUS'
          WHEN 0 THEN '3-BLB'
          ELSE '5-???' END
    WHEN 'dr' THEN "4-ADDT'L"
    ELSE "4-ADDT'L" END as scv_group_type
  FROM `clingen-stage.clinvar_curator.voi_group` vrtr
  JOIN `clingen-stage.clinvar_curator.voi_scv` vs 
  ON 
    vrtr.variation_id = vs.variation_id AND 
    vrtr.rpt_stmt_type=vs.rpt_stmt_type AND 
    vrtr.rank = vs.rank AND 
    (vrtr.start_release_date <= vs.end_release_date) AND 
    (vrtr.end_release_date >= vs.start_release_date)
  WHERE NOT EXISTS 
  (
    SELECT vsrtr.id
    FROM `clingen-stage.clinvar_curator.voi_scv_group` vsrtr
    WHERE 
      vsrtr.variation_id=vs.variation_id AND
      vsrtr.id=vs.id AND 
      vsrtr.version=vs.version AND
      vsrtr.start_release_date=vrtr.start_release_date AND 
      vsrtr.end_release_date=vrtr.end_release_date
  );

END;

-- find intersection between voi and voi_scv windows for the same variant to create the voi_group records
-- date window intersection is found by using the condition ((start_window1 <= end_window2) AND (end_window1 >= start_window2))
-- the start and end dates are always inclusive, meaning the start date is the date that the record is first available and
-- the end date is the date that the record is last available.
-- https://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap
-- (s1 <= eX) AND (e1 >= sX)

-- A        s1--------------e1
--  |----|----|----|----|----|----|----|
-- B           s2------e2                  s1 <= e2 AND e1 >= s2.   TRUE
-- C s3------------------------e3          s1 <= e3 AND e1 >= s3.   TRUE
-- D   s4------e4                          s1 <= e4 AND e1 >= s4.   TRUE
-- E               s5----------e5          s1 <= e5 AND e1 >= s5.   TRUE
-- F s6--e6                                s1 <= e6 AND e1 >= s6.   FALSE
-- G.                          s7--e7      s1 <= e7 AND e1 >= s7.   FALSE
