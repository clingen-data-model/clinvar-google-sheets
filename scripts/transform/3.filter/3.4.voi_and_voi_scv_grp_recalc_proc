-- TODO ! still need to deal with process to update these tables correctly. For now, always recreate tables from scratch.

CREATE OR REPLACE PROCEDURE `clingen-stage.clinvar_curator.voi_and_voi_scv_grp_recalc_proc`()
BEGIN

  CREATE OR REPLACE TABLE `clingen-stage.clinvar_curator.voi_group_recalc`
  (	
    start_release_date DATE,
    end_release_date DATE,
    variation_id	STRING,
    rpt_stmt_type	STRING,
    rank	INTEGER,
    clinsig_count	INTEGER,
    agg_sig_type	INTEGER,
    sig_type ARRAY<STRUCT<count INT64, percent NUMERIC>>,
    cvc_clinsig_count	INTEGER,
    agg_cvc_sig_type	INTEGER,
    cvc_sig_type ARRAY<STRUCT<count INT64, percent NUMERIC>>,
    max_last_evaluated	DATE,
    max_submission_date DATE,
    submission_count	INTEGER DEFAULT 0,
    submitter_count	INTEGER DEFAULT 0,
    cvc_submission_count	INTEGER DEFAULT 0,
    cvc_submitter_count	INTEGER DEFAULT 0,
    cvc_nc_submission_count	INTEGER DEFAULT 0,
    cvc_nc_submitter_count	INTEGER DEFAULT 0,
    agg_classif	STRING,
    agg_classif_w_count	STRING,
    agg_cvc_classif	STRING,
    agg_cvc_classif_w_count	STRING
  );

  INSERT `clingen-stage.clinvar_curator.voi_group_recalc`
  (
    start_release_date, end_release_date, variation_id, 
    rpt_stmt_type, rank,
    clinsig_count, agg_sig_type, sig_type,
    cvc_clinsig_count, agg_cvc_sig_type, cvc_sig_type,
    max_last_evaluated, max_submission_date,
    submission_count, submitter_count,
    cvc_submission_count, cvc_submitter_count,
    cvc_nc_submission_count, cvc_nc_submitter_count,  
    agg_classif, agg_classif_w_count, 
    agg_cvc_classif, agg_cvc_classif_w_count 
  )
  WITH x AS 
  (
    SELECT 
      vs.variation_id, 
      vr.start_release_date,
      vr.end_release_date,
      vs.rpt_stmt_type, 
      vs.rank,
      vs.clinsig_type,
      vs.classif_type,
      (classif_type||'('||count(DISTINCT vs.id)||')') AS classif_type_w_count,
      IF(count(DISTINCT IF(csc.variation_id is null, vs.id, null)) > 0, vs.classif_type, null) as cvc_classif_type,
      IF(count(DISTINCT IF(csc.variation_id is null, vs.id, null)) > 0, (vs.classif_type||'('||(count(DISTINCT IF(csc.variation_id is null, vs.id, null)))||')'), null) AS cvc_classif_type_w_count
    FROM `clingen-stage.clinvar_curator.voi_scv_change` vr
    JOIN `clingen-stage.clinvar_curator.voi_scv` vs 
    ON 
        vs.variation_id = vr.variation_id AND
        (vs.start_release_date <= vr.end_release_date) AND 
        (vs.end_release_date >= vr.start_release_date)
    JOIN 
    (
      SELECT release_date,
        LEAD( release_date ) 
          OVER (PARTITION BY 1 ORDER BY release_date ASC) as next_release_date
      FROM `clingen-stage.clinvar_curator.clinvar_project_releases` rel
    ) rel
    ON 
      rel.release_date = vr.end_release_date
    LEFT JOIN `clingen-stage.clinvar_curator.cvc_scv_curations` csc
    ON
      csc.variation_id = vs.variation_id AND
      csc.scv_id = vs.id AND csc.scv_ver = vs.version AND
      csc.action = "non-contributory" AND
      DATE(csc.curated_on) <= rel.next_release_date
    WHERE NOT EXISTS 
    (
      SELECT vrtr.variation_id
      FROM `clingen-stage.clinvar_curator.voi_group_recalc` vrtr
      WHERE 
        vrtr.start_release_date = vr.start_release_date AND
        vrtr.end_release_date = vr.end_release_date AND
        vrtr.variation_id = vs.variation_id AND
        vrtr.rpt_stmt_type = vs.rpt_stmt_type AND
        vrtr.rank = vs.rank
    )
    GROUP BY
      vs.variation_id, 
      vr.start_release_date,
      vr.end_release_date,
      vs.rpt_stmt_type, 
      vs.rank,
      vs.classif_type,
      vs.clinsig_type
    ORDER BY
      start_release_date, 
      rpt_stmt_type, 
      rank
  )
  SELECT 
    x.start_release_date,
    x.end_release_date,
    x.variation_id,
    x.rpt_stmt_type, 
    x.rank,
    COUNT(DISTINCT vs.clinsig_type) as clinsig_count,
    SUM(DISTINCT IF(vs.clinsig_type=2,4,IF(vs.clinsig_type=1,2,1))) as agg_sig_type,
    `clingen-stage.clinvar_curator.createSigType`(
      COUNT(DISTINCT IF(vs.clinsig_type = 0, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(vs.clinsig_type = 1, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(vs.clinsig_type = 2, vs.submitter_id, NULL))
    ) as sig_type,
    COUNT(DISTINCT IF(csc.variation_id is null,vs.clinsig_type,null)) as cvc_clinsig_count,
    SUM(DISTINCT IF(csc.variation_id is null,IF(vs.clinsig_type=2,4,IF(vs.clinsig_type=1,2,1)),null)) as agg_cvc_sig_type,
    `clingen-stage.clinvar_curator.createSigType`(
      COUNT(DISTINCT IF(csc.variation_id is null and vs.clinsig_type = 0, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(csc.variation_id is null and vs.clinsig_type = 1, vs.submitter_id, NULL)),
      COUNT(DISTINCT IF(csc.variation_id is null and vs.clinsig_type = 2, vs.submitter_id, NULL))
    ) as cvc_sig_type,
    MAX(vs.last_evaluated) as max_last_evaluated,
    MAX(vs.submission_date) as max_submission_date,
    count(DISTINCT vs.id) as submission_count,
    count(DISTINCT vs.submitter_id) as submitter_count,
    count(DISTINCT IF(csc.variation_id is null, vs.id, null)) as cvc_submission_count,
    count(DISTINCT if(csc.variation_id is null,vs.submitter_id,null)) as cvc_submitter_count,
    count(DISTINCT IF(csc.variation_id is not null, vs.id, null)) as cvc_nc_submission_count,
    count(DISTINCT if(csc.variation_id is not null, vs.submitter_id, null)) as cvc_nc_submitter_count,
    string_agg(distinct x.classif_type, '/' order by x.classif_type) AS agg_classif,
    string_agg(distinct x.classif_type_w_count, '/' order by x.classif_type_w_count) AS agg_classif_w_count,
    string_agg(distinct x.cvc_classif_type, '/' order by x.cvc_classif_type) AS agg_cvc_classif,
    string_agg(distinct x.cvc_classif_type_w_count, '/' order by x.cvc_classif_type_w_count) AS agg_cvc_classif_w_count
  FROM x
  JOIN `clingen-stage.clinvar_curator.voi_scv` vs
  ON
    vs.variation_id = x.variation_id AND
    vs.rpt_stmt_type = x.rpt_stmt_type AND
    vs.rank = x.rank AND
    (vs.start_release_date <= x.end_release_date) AND 
    (vs.end_release_date >= x.start_release_date)
  JOIN 
  (
    SELECT release_date,
      LEAD( release_date ) 
        OVER (PARTITION BY 1 ORDER BY release_date ASC) as next_release_date
    FROM `clingen-stage.clinvar_curator.clinvar_project_releases` rel
  ) rel
  ON 
    rel.release_date = x.end_release_date
  LEFT JOIN `clingen-stage.clinvar_curator.cvc_scv_curations` csc
  ON
    csc.variation_id = vs.variation_id AND
    csc.scv_id = vs.id AND csc.scv_ver = vs.version AND
    csc.action = "non-contributory" AND
    DATE(csc.curated_on) <= rel.next_release_date
  GROUP BY
    x.variation_id, 
    x.start_release_date,
    x.end_release_date,
    x.rpt_stmt_type, 
    x.rank
  ORDER BY 
    variation_id, 
    rpt_stmt_type,
    rank desc,
    start_release_date
  ;

  CREATE OR REPLACE TABLE `clingen-stage.clinvar_curator.voi_scv_group_recalc`
  (
    start_release_date DATE, 
    end_release_date DATE,
    variation_id STRING,
    id STRING,
    version INTEGER,
    rpt_stmt_type STRING,
    rank INTEGER,
    outlier_pct NUMERIC,
    cvc_outlier_pct NUMERIC,
    scv_label STRING,
    scv_group_type STRING
  );

  -- voi_scv_release_type_rank
  INSERT  `clingen-stage.clinvar_curator.voi_scv_group_recalc` 
  (
    start_release_date, end_release_date, variation_id, id, version,
    rpt_stmt_type, rank, outlier_pct, cvc_outlier_pct, scv_label, scv_group_type
  )
  SELECT 
    vrtr.start_release_date,
    vrtr.end_release_date,
    vs.variation_id, 
    vs.id, 
    vs.version, 
    vrtr.rpt_stmt_type, 
    vrtr.rank, 
    vrtr.sig_type[OFFSET(vs.clinsig_type)].percent as outlier_pct,
    vrtr.cvc_sig_type[OFFSET(vs.clinsig_type)].percent as cvc_outlier_pct,
    FORMAT("%s (%s) %3.0f%% %s", 
      IFNULL(vs.submitter_abbrev,LEFT(vs.submitter_name,15)), 
      vs.classification_abbrev, 
      vrtr.sig_type[OFFSET(vs.clinsig_type)].percent*100, 
      vs.full_scv_id) as scv_label,
    CASE vs.rpt_stmt_type
    WHEN 'path' THEN
      CASE vs.clinsig_type
          WHEN 2 THEN '1-PLP'
          WHEN 1 THEN '2-VUS'
          WHEN 0 THEN '3-BLB'
          ELSE '5-???' END
    WHEN 'dr' THEN "4-ADDT'L"
    ELSE "4-ADDT'L" END as scv_group_type
  FROM `clingen-stage.clinvar_curator.voi_group_recalc` vrtr
  JOIN `clingen-stage.clinvar_curator.voi_scv` vs 
  on 
    vrtr.variation_id = vs.variation_id AND 
    vrtr.rpt_stmt_type=vs.rpt_stmt_type AND 
    vrtr.rank = vs.rank AND 
    (vrtr.start_release_date <= vs.end_release_date) AND 
    (vrtr.end_release_date >= vs.start_release_date)
  WHERE NOT EXISTS 
  (
    SELECT 
      vsrtr.variation_id,
      vsrtr.id, 
      vsrtr.version
    FROM `clingen-stage.clinvar_curator.voi_scv_group_recalc` vsrtr
    WHERE 
      vsrtr.variation_id=vs.variation_id AND
      vsrtr.id=vs.id AND 
      vsrtr.version=vs.version AND
      vsrtr.start_release_date=vrtr.start_release_date AND 
      vsrtr.end_release_date=vrtr.end_release_date
  )
  ORDER BY 
    variation_id, 
    rpt_stmt_type,
    rank desc,
    id,
    version,
    start_release_date
  ;

END;

-- find intersection between voi and voi_scv windows for the same variant to create the voi_group records
-- date window intersection is found by using the condition ((start_window1 <= end_window2) AND (end_window1 >= start_window2))
-- the start and end dates are always inclusive, meaning the start date is the date that the record is first available and
-- the end date is the date that the record is last available.
-- https://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap
-- (s1 <= eX) AND (e1 >= sX)

-- A        s1--------------e1
--  |----|----|----|----|----|----|----|
-- B           s2------e2                  s1 <= e2 AND e1 >= s2.   TRUE
-- C s3------------------------e3          s1 <= e3 AND e1 >= s3.   TRUE
-- D   s4------e4                          s1 <= e4 AND e1 >= s4.   TRUE
-- E               s5----------e5          s1 <= e5 AND e1 >= s5.   TRUE
-- F s6--e6                                s1 <= e6 AND e1 >= s6.   FALSE
-- G.                          s7--e7      s1 <= e7 AND e1 >= s7.   FALSE
